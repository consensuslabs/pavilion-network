// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/notifications/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of notifications for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get user notifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of notifications to return (default: 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notifications retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/notification.Notification"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/read-all": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark all notifications as read for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark all notifications as read",
                "responses": {
                    "200": {
                        "description": "All notifications marked as read",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/unread-count": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get the count of unread notifications for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get unread notification count",
                "responses": {
                    "200": {
                        "description": "Unread count retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "integer"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/{id}/read": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a specific notification as read",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Mark notification as read",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as read",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid notification ID",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Notification not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidate refresh token and end user session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "description": "Refresh token to invalidate",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/http.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Get a new access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token refresh successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.LoginResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or user already exists",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/comment/{id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the content of an existing comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Update a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated comment data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment.UpdateCommentRequest"
                            "$ref": "#/definitions/comment.UpdateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format or invalid comment data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not authenticated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing comment",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Delete a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not authenticated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/comment/{id}/reaction": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a reaction (like/dislike) to a comment",
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a reaction (like/dislike) to a comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Add a reaction to a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reaction data",
                        "name": "reaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment.ReactionRequest"
                            "$ref": "#/definitions/comment.ReactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reaction added successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format or invalid reaction type",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not authenticated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Comment not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a user's reaction from a comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Remove a reaction from a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reaction removed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - user not authenticated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Comment or reaction not found",
                        "description": "Comment or reaction not found",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/comment/{id}/replies": {
            "get": {
                "description": "Retrieves a paginated list of replies for a specific comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Get replies to a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of replies per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Replies retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/comment.PaginatedComments"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid comment ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Checks if the API server is running properly",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "Health check successful",
                        "schema": {}
                    }
                }
            }
        },
        "/video/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a new video file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "Upload video",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Video file to upload (.mp4, .mov)",
                        "name": "video",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 100,
                        "minLength": 3,
                        "type": "string",
                        "description": "Video title (3-100 characters)",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "maxLength": 1000,
                        "type": "string",
                        "description": "Video description (max 1000 characters)",
                        "name": "description",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upload completed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/video.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/video.UploadResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Processing error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            }
        },
        "/video/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information about a specific video",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "Get video details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Video details retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/video.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/video.VideoDetailsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Video not found or has been deleted",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a video (marks as deleted but preserves the record)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "Delete video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Video deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid video ID format",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Video not found",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a video's title and/or description",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "Update video details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/video.VideoUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Video updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/video.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/video.VideoDetailsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format or validation error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Video not found or has been deleted",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            }
        },
        "/video/{id}/comment": {
            "post": {
                "description": "Creates a new comment for a video",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Create a new comment",
                "summary": "Create a new comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Comment data",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/comment.CreateCommentRequest"
                            "$ref": "#/definitions/comment.CreateCommentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/comment.Comment"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid video ID format or invalid comment",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "User not authenticated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to create comment",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.APIError"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/video/{id}/comments": {
            "get": {
                "description": "Retrieves a paginated list of comments for a specific video",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comment"
                    "comment"
                ],
                "summary": "Get comments for a video",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of comments per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (options: newest, oldest, most_liked; default: newest)",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comments retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/comment.PaginatedComments"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid video ID format",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/http.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "$ref": "#/definitions/http.Error"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/video/{id}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the current upload status of a specific video",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "Get video upload status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Video ID (UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Video status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/video.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Video not found or has been deleted",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            }
        },
        "/videos": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a paginated list of videos with detailed information including transcodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "video"
                ],
                "summary": "List videos",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of videos to return (default: 10, max: 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination (default: 1)",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Videos retrieved successfully with detailed information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/video.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/video.VideoListResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/video.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginRequest": {
            "description": "Login request payload",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "minLength": 8,
                    "example": "Pass123!"
                }
            }
        },
        "auth.LoginResponse": {
            "description": "Login response payload",
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "JWT access token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                },
                "expiresIn": {
                    "description": "Token expiration time in seconds",
                    "type": "integer",
                    "example": 3600
                },
                "refreshToken": {
                    "description": "JWT refresh token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                },
                "tokenType": {
                    "description": "Token type (always \"Bearer\")",
                    "type": "string",
                    "example": "Bearer"
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/auth.User"
                        }
                    ]
                }
            }
        },
        "auth.RefreshTokenRequest": {
            "description": "Refresh token request payload",
            "type": "object",
            "required": [
                "refreshToken"
            ],
            "properties": {
                "refreshToken": {
                    "description": "Valid refresh token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIs..."
                }
            }
        },
        "auth.RegisterRequest": {
            "description": "Registration request payload",
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "name": {
                    "description": "User's full name",
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "description": "User password (min 8 characters)",
                    "type": "string",
                    "minLength": 6,
                    "example": "Pass123!"
                },
                "username": {
                    "description": "Unique username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "auth.User": {
            "description": "User model",
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether account is active",
                    "type": "boolean",
                    "example": true
                },
                "createdAt": {
                    "description": "Account creation timestamp",
                    "type": "string"
                },
                "email": {
                    "description": "User email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "emailVerified": {
                    "description": "Whether email is verified",
                    "type": "boolean",
                    "example": true
                },
                "id": {
                    "description": "Unique user ID",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "lastLoginAt": {
                    "description": "Last login timestamp",
                    "type": "string"
                },
                "name": {
                    "description": "User's full name",
                    "type": "string",
                    "example": "John Doe"
                },
                "updatedAt": {
                    "description": "Last update timestamp",
                    "type": "string"
                },
                "username": {
                    "description": "Unique username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "comment.Comment": {
            "description": "A comment on a video with metadata and reaction counts",
            "type": "object",
            "properties": {
                "content": {
                    "type": "string",
                    "example": "This is a great video!"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "deleted_at": {
                    "type": "string",
                    "example": "2023-01-02T12:00:00Z"
                },
                "dislikes": {
                    "type": "integer",
                    "example": 1
                },
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "likes": {
                    "type": "integer",
                    "example": 5
                },
                "parent_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174003"
                },
                "status": {
                    "enum": [
                        "ACTIVE",
                        "FLAGGED",
                        "HIDDEN"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/comment.Status"
                        }
                    ],
                    "example": "ACTIVE"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174002"
                },
                "video_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174001"
                }
            }
        },
        "comment.CreateCommentRequest": {
            "description": "Request body for creating a new comment",
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "This is a great video!"
                },
                "parent_id": {
                    "type": "string",
                    "format": "uuid",
                    "example": "123e4567-e89b-12d3-a456-426614174003"
                }
            }
        },
        "comment.PaginatedComments": {
            "description": "A paginated list of comments with metadata about the pagination",
            "type": "object",
            "properties": {
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/comment.Comment"
                    }
                },
                "current_page": {
                    "type": "integer",
                    "example": 1
                },
                "has_next_page": {
                    "type": "boolean",
                    "example": true
                },
                "has_prev_page": {
                    "type": "boolean",
                    "example": false
                },
                "total_count": {
                    "type": "integer",
                    "example": 42
                },
                "total_pages": {
                    "type": "integer",
                    "example": 3
                }
            }
        },
        "comment.ReactionRequest": {
            "description": "Request body for adding a reaction to a comment",
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "LIKE",
                        "DISLIKE"
                    ],
                    "example": "LIKE"
                }
            }
        },
        "comment.Status": {
            "description": "Status of a comment (ACTIVE, FLAGGED, or HIDDEN)",
            "type": "string",
            "enum": [
                "ACTIVE",
                "FLAGGED",
                "HIDDEN"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusFlagged",
                "StatusHidden"
            ]
        },
        "comment.UpdateCommentRequest": {
            "description": "Request body for updating a comment",
            "type": "object",
            "required": [
                "content"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "This is an updated comment."
                }
            }
        },
        "http.APIError": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code identifying the type of error",
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "field": {
                    "description": "Optional field name for validation errors",
                    "type": "string",
                    "example": "email"
                },
                "message": {
                    "description": "Human-readable error message",
                    "type": "string",
                    "example": "Invalid input parameters"
                }
            }
        },
        "http.APIResponse": {
            "description": "Standard API response format",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Optional data returned by the API"
                },
                "error": {
                    "description": "Error information, if any",
                    "allOf": [
                        {
                            "$ref": "#/definitions/http.APIError"
                        }
                    ]
                },
                "message": {
                    "description": "Optional message describing the response",
                    "type": "string",
                    "example": "Operation completed successfully"
                },
                "success": {
                    "description": "Indicates if the request was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "http.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "http.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "$ref": "#/definitions/http.Error"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "notification.EventType": {
            "description": "Type of notification event (e.g. VIDEO_UPLOADED, COMMENT_CREATED)",
            "type": "string",
            "enum": [
                "VIDEO_UPLOADED",
                "VIDEO_PROCESSED",
                "VIDEO_UPDATED",
                "VIDEO_DELETED",
                "COMMENT_CREATED",
                "COMMENT_REPLIED",
                "COMMENT_REACTION",
                "USER_FOLLOWED",
                "USER_MENTIONED",
                "AUTH_EVENT"
            ],
            "x-enum-varnames": [
                "VideoUploaded",
                "VideoProcessed",
                "VideoUpdated",
                "VideoDeleted",
                "CommentCreated",
                "CommentReplied",
                "CommentReaction",
                "UserFollowed",
                "UserMentioned",
                "AuthEvent"
            ]
        },
        "notification.Notification": {
            "description": "A notification entity with metadata and status information",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Human-readable notification content",
                    "type": "string",
                    "example": "Your video 'My awesome video' has been uploaded successfully"
                },
                "createdAt": {
                    "description": "When the notification was created",
                    "type": "string",
                    "example": "2025-03-05T21:26:06Z"
                },
                "id": {
                    "description": "Unique identifier for the notification",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "metadata": {
                    "description": "Additional metadata about the notification",
                    "type": "object",
                    "additionalProperties": true
                },
                "readAt": {
                    "description": "When the notification was marked as read (null if unread)",
                    "type": "string"
                },
                "type": {
                    "description": "Type of notification (VIDEO_UPLOADED, COMMENT_CREATED, etc.)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/notification.EventType"
                        }
                    ],
                    "example": "VIDEO_UPLOADED"
                },
                "userId": {
                    "description": "User ID who should receive this notification",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440001"
                }
            }
        },
        "video.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "video.TranscodeInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "resolution": {
                    "type": "string"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video.TranscodeSegmentInfo"
                    }
                }
            }
        },
        "video.TranscodeSegmentInfo": {
            "type": "object",
            "properties": {
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "ipfs_cid": {
                    "type": "string"
                },
                "storage_path": {
                    "type": "string"
                }
            }
        },
        "video.UploadResponse": {
            "type": "object",
            "properties": {
                "file_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipfs_cid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "storage_path": {
                    "type": "string"
                },
                "transcodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video.TranscodeInfo"
                    }
                }
            }
        },
        "video.VideoDetailsResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "file_id": {
                    "type": "string"
                },
                "file_size": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "ipfs_cid": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "storage_path": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "transcodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video.TranscodeInfo"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "video.VideoListResponse": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/video.VideoDetailsResponse"
                    }
                }
            }
        },
        "video.VideoUpdateRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerAuth": {
            "description": "JWT token for authentication",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Authentication endpoints",
            "name": "auth"
        },
        {
            "description": "Video management endpoints",
            "name": "video"
        },
        {
            "description": "Comment management endpoints",
            "name": "comment"
        },
        {
            "description": "Health check endpoints",
            "name": "health"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Pavilion Network API",
	Description:      "API Server for Pavilion Network Application - A decentralized video platform",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

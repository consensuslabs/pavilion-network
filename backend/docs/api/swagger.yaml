basePath: /
definitions:
  auth.LoginRequest:
    description: Login request payload
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
      password:
        description: User password
        example: Pass123!
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    description: Login response payload
    properties:
      accessToken:
        description: JWT access token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      expiresIn:
        description: Token expiration time in seconds
        example: 3600
        type: integer
      refreshToken:
        description: JWT refresh token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      tokenType:
        description: Token type (always "Bearer")
        example: Bearer
        type: string
      user:
        allOf:
        - $ref: '#/definitions/auth.User'
        description: User information
    type: object
  auth.RefreshTokenRequest:
    description: Refresh token request payload
    properties:
      refreshToken:
        description: Valid refresh token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    required:
    - refreshToken
    type: object
  auth.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
      name:
        description: User's full name
        example: John Doe
        type: string
      password:
        description: User password (min 8 characters)
        example: Pass123!
        minLength: 6
        type: string
      username:
        description: Unique username
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.User:
    description: User model
    properties:
      active:
        description: Whether account is active
        example: true
        type: boolean
      createdAt:
        description: Account creation timestamp
        type: string
      email:
        description: User email address
        example: user@example.com
        type: string
      emailVerified:
        description: Whether email is verified
        example: true
        type: boolean
      id:
        description: Unique user ID
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      lastLoginAt:
        description: Last login timestamp
        type: string
      name:
        description: User's full name
        example: John Doe
        type: string
      updatedAt:
        description: Last update timestamp
        type: string
      username:
        description: Unique username
        example: johndoe
        type: string
    type: object
  comment.Comment:
    description: A comment on a video with metadata and reaction counts
    properties:
      content:
        example: This is a great video!
        type: string
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      deleted_at:
        example: "2023-01-02T12:00:00Z"
        type: string
      dislikes:
        example: 1
        type: integer
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        format: uuid
        type: string
      likes:
        example: 5
        type: integer
      parent_id:
        example: 123e4567-e89b-12d3-a456-426614174003
        format: uuid
        type: string
      status:
        allOf:
        - $ref: '#/definitions/comment.Status'
        enum:
        - ACTIVE
        - FLAGGED
        - HIDDEN
        example: ACTIVE
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      user_id:
        example: 123e4567-e89b-12d3-a456-426614174002
        format: uuid
        type: string
      video_id:
        example: 123e4567-e89b-12d3-a456-426614174001
        format: uuid
        type: string
    type: object
  comment.CreateCommentRequest:
    description: Request body for creating a new comment
    properties:
      content:
        example: This is a great video!
        type: string
      parent_id:
        example: 123e4567-e89b-12d3-a456-426614174003
        format: uuid
        type: string
    required:
    - content
    type: object
  comment.PaginatedComments:
    description: A paginated list of comments with metadata about the pagination
    properties:
      comments:
        items:
          $ref: '#/definitions/comment.Comment'
        type: array
      current_page:
        example: 1
        type: integer
      has_next_page:
        example: true
        type: boolean
      has_prev_page:
        example: false
        type: boolean
      total_count:
        example: 42
        type: integer
      total_pages:
        example: 3
        type: integer
    type: object
  comment.ReactionRequest:
    description: Request body for adding a reaction to a comment
    properties:
      type:
        enum:
        - LIKE
        - DISLIKE
        example: LIKE
        type: string
    required:
    - type
    type: object
  comment.Status:
    description: Status of a comment (ACTIVE, FLAGGED, or HIDDEN)
    enum:
    - ACTIVE
    - FLAGGED
    - HIDDEN
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusFlagged
    - StatusHidden
  comment.UpdateCommentRequest:
    description: Request body for updating a comment
    properties:
      content:
        example: This is an updated comment.
        type: string
    required:
    - content
    type: object
  http.APIError:
    description: Error response structure
    properties:
      code:
        description: Error code identifying the type of error
        example: VALIDATION_ERROR
        type: string
      field:
        description: Optional field name for validation errors
        example: email
        type: string
      message:
        description: Human-readable error message
        example: Invalid input parameters
        type: string
    type: object
  http.APIResponse:
    description: Standard API response format
    properties:
      data:
        description: Optional data returned by the API
      error:
        allOf:
        - $ref: '#/definitions/http.APIError'
        description: Error information, if any
      message:
        description: Optional message describing the response
        example: Operation completed successfully
        type: string
      success:
        description: Indicates if the request was successful
        example: true
        type: boolean
    type: object
  http.Error:
    properties:
      code:
        type: string
      field:
        type: string
      message:
        type: string
    type: object
  http.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/http.Error'
      message:
        type: string
      success:
        type: boolean
    type: object
  notification.EventType:
    description: Type of notification event (e.g. VIDEO_UPLOADED, COMMENT_CREATED)
    enum:
    - VIDEO_UPLOADED
    - VIDEO_PROCESSED
    - VIDEO_UPDATED
    - VIDEO_DELETED
    - COMMENT_CREATED
    - COMMENT_REPLIED
    - COMMENT_REACTION
    - USER_FOLLOWED
    - USER_MENTIONED
    - AUTH_EVENT
    type: string
    x-enum-varnames:
    - VideoUploaded
    - VideoProcessed
    - VideoUpdated
    - VideoDeleted
    - CommentCreated
    - CommentReplied
    - CommentReaction
    - UserFollowed
    - UserMentioned
    - AuthEvent
  notification.Notification:
    description: A notification entity with metadata and status information
    properties:
      content:
        description: Human-readable notification content
        example: Your video 'My awesome video' has been uploaded successfully
        type: string
      createdAt:
        description: When the notification was created
        example: "2025-03-05T21:26:06Z"
        type: string
      id:
        description: Unique identifier for the notification
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      metadata:
        additionalProperties: true
        description: Additional metadata about the notification
        type: object
      readAt:
        description: When the notification was marked as read (null if unread)
        type: string
      type:
        allOf:
        - $ref: '#/definitions/notification.EventType'
        description: Type of notification (VIDEO_UPLOADED, COMMENT_CREATED, etc.)
        example: VIDEO_UPLOADED
      userId:
        description: User ID who should receive this notification
        example: 550e8400-e29b-41d4-a716-446655440001
        type: string
    type: object
  video.APIResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  video.TranscodeInfo:
    properties:
      created_at:
        type: string
      format:
        type: string
      id:
        type: string
      resolution:
        type: string
      segments:
        items:
          $ref: '#/definitions/video.TranscodeSegmentInfo'
        type: array
    type: object
  video.TranscodeSegmentInfo:
    properties:
      duration:
        type: integer
      id:
        type: string
      ipfs_cid:
        type: string
      storage_path:
        type: string
    type: object
  video.UploadResponse:
    properties:
      file_id:
        type: string
      id:
        type: string
      ipfs_cid:
        type: string
      status:
        type: string
      storage_path:
        type: string
      transcodes:
        items:
          $ref: '#/definitions/video.TranscodeInfo'
        type: array
    type: object
  video.VideoDetailsResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      file_id:
        type: string
      file_size:
        type: integer
      id:
        type: string
      ipfs_cid:
        type: string
      status:
        type: string
      storage_path:
        type: string
      title:
        type: string
      transcodes:
        items:
          $ref: '#/definitions/video.TranscodeInfo'
        type: array
      updated_at:
        type: string
    type: object
  video.VideoListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      videos:
        items:
          $ref: '#/definitions/video.VideoDetailsResponse'
        type: array
    type: object
  video.VideoUpdateRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Pavilion Network Application - A decentralized video
    platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pavilion Network API
  version: "1.0"
paths:
  /api/v1/notifications/:
    get:
      description: Retrieve a paginated list of notifications for the authenticated
        user
      parameters:
      - description: 'Number of notifications to return (default: 10)'
        in: query
        name: limit
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Notifications retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/notification.Notification'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - notifications
  /api/v1/notifications/{id}/read:
    put:
      description: Mark a specific notification as read
      parameters:
      - description: Notification ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification marked as read
          schema:
            $ref: '#/definitions/http.APIResponse'
        "400":
          description: Invalid notification ID
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "404":
          description: Notification not found
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Mark notification as read
      tags:
      - notifications
  /api/v1/notifications/read-all:
    put:
      description: Mark all notifications as read for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: All notifications marked as read
          schema:
            $ref: '#/definitions/http.APIResponse'
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Mark all notifications as read
      tags:
      - notifications
  /api/v1/notifications/unread-count:
    get:
      description: Get the count of unread notifications for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Unread count retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  additionalProperties:
                    type: integer
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Get unread notification count
      tags:
      - notifications
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginResponse'
              type: object
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Invalid credentials
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate refresh token and end user session
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/http.APIResponse'
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Unauthorized or invalid token
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginResponse'
              type: object
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.User'
              type: object
        "400":
          description: Invalid request format or user already exists
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Register new user
      tags:
      - auth
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an existing comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid comment ID format
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "401":
          description: Unauthorized - user not authenticated
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "404":
          description: Comment not found
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Updates the content of an existing comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Updated comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/comment.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid comment ID format or invalid comment data
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "401":
          description: Unauthorized - user not authenticated
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "404":
          description: Comment not found
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - comment
  /comment/{id}/reaction:
    delete:
      consumes:
      - application/json
      description: Removes a user's reaction from a comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Reaction removed successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid comment ID format
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "401":
          description: Unauthorized - user not authenticated
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "404":
          description: Comment or reaction not found
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      security:
      - BearerAuth: []
      summary: Remove a reaction from a comment
      tags:
      - comment
    post:
      consumes:
      - application/json
      description: Adds a reaction (like/dislike) to a comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Reaction data
        in: body
        name: reaction
        required: true
        schema:
          $ref: '#/definitions/comment.ReactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reaction added successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Invalid comment ID format or invalid reaction type
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "401":
          description: Unauthorized - user not authenticated
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "404":
          description: Comment not found
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      security:
      - BearerAuth: []
      summary: Add a reaction to a comment
      tags:
      - comment
  /comment/{id}/replies:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of replies for a specific comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of replies per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Replies retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/comment.PaginatedComments'
              type: object
        "400":
          description: Invalid comment ID format
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      summary: Get replies to a comment
      tags:
      - comment
  /health:
    get:
      description: Checks if the API server is running properly
      produces:
      - application/json
      responses:
        "200":
          description: Health check successful
          schema: {}
      summary: Health check endpoint
      tags:
      - health
  /video/{id}:
    delete:
      description: Soft delete a video (marks as deleted but preserves the record)
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video deleted successfully
          schema:
            $ref: '#/definitions/video.APIResponse'
        "400":
          description: Invalid video ID format
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete video
      tags:
      - video
    get:
      description: Retrieve detailed information about a specific video
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoDetailsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found or has been deleted
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Get video details
      tags:
      - video
    patch:
      consumes:
      - application/json
      description: Update a video's title and/or description
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/video.VideoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Video updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoDetailsResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found or has been deleted
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Update video details
      tags:
      - video
  /video/{id}/comment:
    post:
      consumes:
      - application/json
      description: Creates a new comment for a video
      parameters:
      - description: Video ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/comment.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment created successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/comment.Comment'
              type: object
        "400":
          description: Invalid video ID format or invalid comment
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: User not authenticated
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "500":
          description: Failed to create comment
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Create a new comment
      tags:
      - comment
  /video/{id}/comments:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of comments for a specific video
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of comments per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: 'Sort order (options: newest, oldest, most_liked; default: newest)'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comments retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                data:
                  $ref: '#/definitions/comment.PaginatedComments'
              type: object
        "400":
          description: Invalid video ID format
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
        "500":
          description: Internal server error
          schema:
            allOf:
            - $ref: '#/definitions/http.Response'
            - properties:
                error:
                  $ref: '#/definitions/http.Error'
              type: object
      summary: Get comments for a video
      tags:
      - comment
  /video/{id}/status:
    get:
      description: Retrieve the current upload status of a specific video
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found or has been deleted
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Get video upload status
      tags:
      - video
  /video/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new video file
      parameters:
      - description: Video file to upload (.mp4, .mov)
        in: formData
        name: video
        required: true
        type: file
      - description: Video title (3-100 characters)
        in: formData
        maxLength: 100
        minLength: 3
        name: title
        required: true
        type: string
      - description: Video description (max 1000 characters)
        in: formData
        maxLength: 1000
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upload completed successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.UploadResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Processing error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload video
      tags:
      - video
  /videos:
    get:
      description: Retrieve a paginated list of videos with detailed information including
        transcodes
      parameters:
      - description: 'Number of videos to return (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Videos retrieved successfully with detailed information
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoListResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: List videos
      tags:
      - video
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: JWT token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication endpoints
  name: auth
- description: Video management endpoints
  name: video
- description: Comment management endpoints
  name: comments
- description: Health check endpoints
  name: health

basePath: /
definitions:
  auth.LoginRequest:
    description: Login request payload
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
      password:
        description: User password
        example: Pass123!
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.LoginResponse:
    description: Login response payload
    properties:
      accessToken:
        description: JWT access token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      expiresIn:
        description: Token expiration time in seconds
        example: 3600
        type: integer
      refreshToken:
        description: JWT refresh token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
      tokenType:
        description: Token type (always "Bearer")
        example: Bearer
        type: string
      user:
        allOf:
        - $ref: '#/definitions/auth.User'
        description: User information
    type: object
  auth.RefreshTokenRequest:
    description: Refresh token request payload
    properties:
      refreshToken:
        description: Valid refresh token
        example: eyJhbGciOiJIUzI1NiIs...
        type: string
    required:
    - refreshToken
    type: object
  auth.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: User email address
        example: user@example.com
        type: string
      name:
        description: User's full name
        example: John Doe
        type: string
      password:
        description: User password (min 8 characters)
        example: Pass123!
        minLength: 6
        type: string
      username:
        description: Unique username
        example: johndoe
        type: string
    required:
    - email
    - password
    - username
    type: object
  auth.User:
    description: User model
    properties:
      active:
        description: Whether account is active
        example: true
        type: boolean
      createdAt:
        description: Account creation timestamp
        type: string
      email:
        description: User email address
        example: user@example.com
        type: string
      emailVerified:
        description: Whether email is verified
        example: true
        type: boolean
      id:
        description: Unique user ID
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      lastLoginAt:
        description: Last login timestamp
        type: string
      name:
        description: User's full name
        example: John Doe
        type: string
      updatedAt:
        description: Last update timestamp
        type: string
      username:
        description: Unique username
        example: johndoe
        type: string
    type: object
  http.APIError:
    description: Error response structure
    properties:
      code:
        description: Error code identifying the type of error
        example: VALIDATION_ERROR
        type: string
      field:
        description: Optional field name for validation errors
        example: email
        type: string
      message:
        description: Human-readable error message
        example: Invalid input parameters
        type: string
    type: object
  http.APIResponse:
    description: Standard API response format
    properties:
      data:
        description: Optional data returned by the API
      error:
        allOf:
        - $ref: '#/definitions/http.APIError'
        description: Error information, if any
      message:
        description: Optional message describing the response
        example: Operation completed successfully
        type: string
      success:
        description: Indicates if the request was successful
        example: true
        type: boolean
    type: object
  video.APIResponse:
    properties:
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  video.TranscodeInfo:
    properties:
      created_at:
        type: string
      format:
        type: string
      id:
        type: string
      resolution:
        type: string
      segments:
        items:
          $ref: '#/definitions/video.TranscodeSegmentInfo'
        type: array
    type: object
  video.TranscodeSegmentInfo:
    properties:
      duration:
        type: integer
      id:
        type: string
      ipfs_cid:
        type: string
      storage_path:
        type: string
    type: object
  video.UploadResponse:
    properties:
      file_id:
        type: string
      id:
        type: string
      ipfs_cid:
        type: string
      status:
        type: string
      storage_path:
        type: string
      transcodes:
        items:
          $ref: '#/definitions/video.TranscodeInfo'
        type: array
    type: object
  video.VideoDetailsResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      file_id:
        type: string
      file_size:
        type: integer
      id:
        type: string
      ipfs_cid:
        type: string
      status:
        type: string
      storage_path:
        type: string
      title:
        type: string
      transcodes:
        items:
          $ref: '#/definitions/video.TranscodeInfo'
        type: array
      updated_at:
        type: string
    type: object
  video.VideoListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      videos:
        items:
          $ref: '#/definitions/video.VideoDetailsResponse'
        type: array
    type: object
  video.VideoUpdateRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API Server for Pavilion Network Application - A decentralized video
    platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Pavilion Network API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginResponse'
              type: object
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Invalid credentials
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Login user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidate refresh token and end user session
      parameters:
      - description: Refresh token to invalidate
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/http.APIResponse'
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Unauthorized or invalid token
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token refresh successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginResponse'
              type: object
        "400":
          description: Invalid request format
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Registration successful
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.User'
              type: object
        "400":
          description: Invalid request format or user already exists
          schema:
            allOf:
            - $ref: '#/definitions/http.APIResponse'
            - properties:
                error:
                  $ref: '#/definitions/http.APIError'
              type: object
      summary: Register new user
      tags:
      - auth
  /video/{id}:
    delete:
      description: Soft delete a video (marks as deleted but preserves the record)
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video deleted successfully
          schema:
            $ref: '#/definitions/video.APIResponse'
        "400":
          description: Invalid video ID format
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete video
      tags:
      - video
    get:
      description: Retrieve detailed information about a specific video
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video details retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoDetailsResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Get video details
      tags:
      - video
    patch:
      consumes:
      - application/json
      description: Update a video's title and/or description
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/video.VideoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Video updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoDetailsResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Update video details
      tags:
      - video
  /video/{id}/status:
    get:
      description: Retrieve the current upload status of a specific video
      parameters:
      - description: Video ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Video status retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "404":
          description: Video not found
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Get video upload status
      tags:
      - video
  /video/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a new video file
      parameters:
      - description: Video file to upload (.mp4, .mov)
        in: formData
        name: video
        required: true
        type: file
      - description: Video title (3-100 characters)
        in: formData
        maxLength: 100
        minLength: 3
        name: title
        required: true
        type: string
      - description: Video description (max 1000 characters)
        in: formData
        maxLength: 1000
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upload completed successfully
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.UploadResponse'
              type: object
        "400":
          description: Invalid request format or validation error
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Processing error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: Upload video
      tags:
      - video
  /videos:
    get:
      description: Retrieve a paginated list of videos with detailed information including
        transcodes
      parameters:
      - description: 'Number of videos to return (default: 10, max: 50)'
        in: query
        name: limit
        type: integer
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Videos retrieved successfully with detailed information
          schema:
            allOf:
            - $ref: '#/definitions/video.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/video.VideoListResponse'
              type: object
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/video.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/video.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/video.APIResponse'
      security:
      - BearerAuth: []
      summary: List videos
      tags:
      - video
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    description: JWT token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication endpoints
  name: auth
- description: Video management endpoints
  name: video
- description: Health check endpoints
  name: health
